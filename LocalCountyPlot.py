#pip install geopandas matplotlib us

import geopandas as gpd
import matplotlib.pyplot as plt

def loadShapeFile(file_name):
    file = gpd.read_file(file_name)
    return file

# Filter the counties
def plotCounties(counties, projection= None):
    if projection == None:
        projection = str(counties.crs).replace("EPSG:","") #if no projection defined, default to layout listed as "CRS" in the SHP file
    state_county_fips = counties['STATEFP']+counties['COUNTYFP']
    visited_counties = counties[state_county_fips.isin(county_list)]
    visited_counties = visited_counties.to_crs(epsg=projection)

    fig, ax = plt.subplots(figsize=(10,  10))
    counties.to_crs(epsg=projection).plot(ax=ax, color='lightgrey', alpha=0.5)  # Plot all counties for an outline
    visited_counties.plot(ax=ax, color='red', alpha=1)  # Highlight visited counties on top
    ax.set_title('Visited US Counties')
    plt.axis('off') #Removes ticks and gridlines
    plt.show()
    

def get_default_epsg(input_file):
    return str(input_file.crs).replace("EPSG:","")
    

def get_epsg_format(epsg_min, epsg_max):
    print("A shape format must be determined for the output map. Common examples include:")
    for key, text in epsg_options.items():
        print(f"{key}: {text}")
    print()
    default_projection = get_default_epsg(counties)
    while True:
        input_format = input(f"The default format for your file is {default_projection}. To use this EPSG format, press enter, or type an alternate code here:")
        if input_format == "":
            return default_projection
        try:
            if epsg_min <= int(input_format) <= epsg_max:
                return input_format
            else:
                print(f"Invalid input. EPSG formats range from {epsg_min} tp {epsg_max}.")
        except ValueError:
            print("Invalid input. Please enter a number.")

epsg_options = {
    3395: "Mercator Projection",
    5070: "Albers Equal Area (Recommended Layout for US States)",
    5072: "Lambert Conformal Conic",
    6933: "Modified Stereographic"
    }

local_list = {'08123', '53015', '78020', '51760', '25021', '41045', '37135', '54039', '47187', '42021', '04015', '20103', '18133', '48027', '50027', '44005', '08019', '34003', '42017', '26089', '27037', '42037', '51155', '48187', '42125', '51069', '06053', '51183', '29053', '40083', '08115', '48121', '13097', '06043', '33007', '31079', '08045', '42059', '21117', '45063', '41015', '37101', '41065', '40103', '08111', '39171', '17119', '55037', '04025', '27139', '18109', '30031', '22037', '26137', '17197', '36105', '05119', '08087', '20017', '34025', '50003', '48105', '50025', '18177', '37083', '23025', '06015', '35023', '44009', '06075', '06103', '48389', '56007', '56037', '18065', '08089', '06005', '41069', '50021', '08117', '32017', '44003', '37155', '42099', '35039', '36085', '45003', '31159', '34017', '17105', '48309', '39113', '42121', '05059', '13265', '08057', '08051', '51059', '02170', '06037', '49037', '39023', '17031', '24035', '42093', '35031', '21061', '39103', '20059', '36071', '20091', '34035', '42085', '55085', '13133', '26125', '08081', '38003', '06109', '06041', '06069', '08083', '39049', '39169', '47113', '24017', '29183', '18087', '36115', '38093', '08013', '12099', '23005', '06081', '12087', '21099', '06065', '31153', '08071', '23009', '48435', '04021', '39133', '36111', '31111', '51107', '42055', '37163', '48449', '36095', '41005', '28009', '42035', '31055', '18021', '35029', '32009', '36065', '33003', '29157', '21029', '15009', '41027', '39165', '05093', '40017', '49015', '49041', '51161', '20195', '18097', '08101', '33013', '16015', '39005', '35035', '78030', '16051', '20069', '27053', '05035', '13301', '26023', '09013', '06035', '24033', '05109', '39135', '47163', '49023', '48229', '50007', '31081', '53011', '35037', '16043', '06107', '51191', '48065', '51087', '31093', '06077', '30033', '13143', '40071', '24043', '39013', '29095', '48209', '55099', '06115', '51660', '06067', '06113', '12009', '17117', '08061', '51033', '16081', '41007', '35047', '24025', '47047', '55039', '40009', '08031', '19155', '51630', '42105', '53043', '17073', '09001', '39097', '24031', '08001', '50017', '08023', '39051', '53009', '42065', '47069', '48069', '19103', '06007', '51179', '25013', '08059', '39057', '05057', '23011', '40119', '51023', '04013', '12086', '49021', '36059', '41013', '40039', '45055', '20045', '06095', '48439', '41043', '06085', '39047', '37061', '29155', '08011', '39119', '17043', '48171', '39139', '06059', '26069', '25017', '55083', '17167', '04001', '06027', '05051', '12111', '21041', '08067', '32023', '08003', '17097', '37051', '42027', '17051', '45031', '48363', '24510', '11001', '41057', '20041', '42045', '23023', '24021', '49055', '28093', '54093', '39123', '53033', '17161', '06071', '24023', '09015', '05125', '55013', '53067', '28033', '08077', '35019', '53061', '08015', '47077', '29510', '56005', '56001', '51085', '55097', '55019', '36089', '42069', '25023', '31177', '49017', '47005', '18141', '37019', '08033', '08069', '37127', '08029', '01029', '06013', '20173', '20015', '21009', '55015', '06051', '51015', '13045', '41017', '36091', '47119', '51163', '24003', '01115', '18091', '53037', '13189', '16065', '08035', '33015', '33017', '02068', '48245', '01073', '01093', '35049', '29186', '27123', '34039', '17113', '39095', '41047', '20031', '51173', '17107', '45041', '55131', '36021', '08014', '48371', '34015', '34033', '15001', '39059', '13211', '17099', '15003', '36039', '30095', '31185', '25009', '56035', '53027', '06031', '08107', '36113', '55089', '56029', '48037', '10003', '48031', '24001', '33001', '17049', '37183', '12071', '49031', '51678', '18089', '50001', '20191', '05085', '54061', '06001', '24027', '29159', '20111', '13245', '30029', '51570', '20171', '35006', '48091', '20177', '32003', '42033', '36061', '17035', '17135', '37141', '27035', '39093', '05019', '06019', '04003', '30073', '36027', '42001', '04019', '51013', '33009', '41039', '41033', '53031', '47037', '48223', '55133', '30035', '17063', '35017', '37001', '47043', '42013', '41051', '18127', '08109', '29019', '47189', '38015', '16019', '18167', '36041', '39043', '56039', '39117', '24005', '30077', '17005', '24015', '28057', '06087', '37057', '35013', '39153', '25005', '08121', '36047', '42127', '34007', '34037', '36031', '48109', '18151', '32510', '05095', '47075', '19001', '51121', '48139', '30055', '39035', '30111', '42029', '40149', '42041', '51177', '45033', '17011', '55027', '08099', '08049', '42097', '37129', '06097', '05099', '06057', '12011', '51730', '47147', '04017', '29031', '47085', '20203', '36081', '34031', '36079', '50015', '06021', '53053', '51153', '54069', '02122', '18059', '42019', '06061', '21227', '35001', '49025', '16023', '20101', '27027', '36033', '42129', '06047', '36025', '47039', '37191', '35045', '36023', '30097', '42133', '12085', '13121', '16011', '29143', '51595', '13089', '55117', '06049', '37081', '37119', '37085', '56027', '31049', '01121', '20167', '06055', '38007', '17103', '48275', '56019', '41019', '08085', '39041', '36083', '33011', '48359', '37063', '53041', '29201', '04005', '42075', '16001', '13073', '48375', '09011', '29139', '30061', '17023', '09007', '51510', '53057', '53035', '26159', '08041', '29189', '47157', '45079', '41011', '48453', '25003', '12097', '08065', '20053', '34013', '54003', '23031', '28145', '08075', '20071', '53007', '21067', '39061', '36087', '21093', '51165', '12061', '20061', '48397', '36055', '09009', '36119', '36019', '30027', '19031', '12105', '37131', '42003', '42079', '27163', '08091', '48491', '21165', '12103', '41035', '06011', '29195', '48043', '20139', '35057', '06017', '32031', '16013', '42063', '47081', '39129', '42031', '42113', '55079', '06089', '48179', '29107', '51171', '21111', '36005', '13217', '19099', '19163', '06029', '19153', '41023', '20135', '49019', '29219', '55061', '48483', '25027', '48141', '51590', '42107', '05117', '42101', '20209', '34021', '48231', '45061', '42119', '50005', '06003', '25025', '48267', '30003', '06039', '12057', '28081', '31109', '42071', '20169', '47173', '39155', '36001', '30013', '53073', '29099', '06073', '37195', '33005', '40109', '34023', '36117', '39173', '48113', '21077', '31047', '08055', '48153', '35015', '47165', '01015', '12095', '25011', '40015', '50023', '48217', '19157', '48029', '41067', '21185', '13063', '06099', '06079', '48129', '36077', '38025', '21015', '27127', '55059', '31019', '47059', '23019', '34027', '37153', '39143', '39099', '01127', '02063', '32005', '19165', '05123', '22053', '32021', '08005', '51197', '30067', '16037', '02020', '55101', '08037', '44007', '19049', '20051', '39089', '51149', '42103', '09003', '49053', '42043', '31101', '04012', '48277', '34005', '18039', '29027', '05091', '39069', '48477', '51041', '39027'}

if 'allCounties' in locals(): #allows for counties to be passed in from another python script, but default to a sample list if not
    county_list = allCounties
else:
    county_list = local_list

shapefile = 'cb_2022_us_county_20m.shp'
counties = loadShapeFile(shapefile)

epsg_format = get_epsg_format(1024, 32767) #Maximum and minimum EPSG range per standards
print(f"EPSG File format for your map: {epsg_format}")

plotCounties(counties, epsg_format)
